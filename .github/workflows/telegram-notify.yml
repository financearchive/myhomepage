name: Smart Telegram Bulk Notification (UTF-8 Fix + 경로안전)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/site/notes/**'

jobs:
  notify:
    runs-on: ubuntu-latest

    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Notify Telegram with bulk message
      run: |
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

        git config --global core.quotepath false
        git config --global core.precomposeunicode true

        echo "📂 변경 파일 추출 중..."

        if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
          echo "❌ Error: Telegram bot token or chat ID not set"
          exit 1
        fi

        # 삭제된 파일 제외 (ACMRT만 포함)
        changed_files=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.before }} ${{ github.sha }} -- 'src/site/notes/**/*.md' | grep -v "Home.md" || true)

        if [[ -z "$changed_files" ]]; then
          echo "ℹ️ 변경된 마크다운 파일이 없습니다."
          exit 0
        fi

        echo "🔍 감지된 파일들:"
        echo "$changed_files"

        MESSAGE="📢 <b>머니다이어리 업데이트 알림</b>\n\n🔗 <a href=\"https://moneydiary.co.kr\">moneydiary.co.kr</a>\n\n"

        echo "$changed_files" | while IFS= read -r file; do
          if [[ -z "$file" ]]; then
            continue
          fi

          # 경로 정규화 (한글, 특수문자 경로 안전 처리)
          normalized_file=$(echo "$file" | iconv -f utf-8 -t utf-8 || echo "$file")

          if [[ ! -f "$normalized_file" ]]; then
            echo "⚠️ 파일 없음: $normalized_file (스킵)"
            continue
          fi

          filename=$(basename "$normalized_file" .md)

          if [[ $normalized_file == *"0.DAILY Invest"* ]]; then
            EMOJI="📈"
            CATEGORY="시황분석"
          elif [[ $normalized_file == *"2.개별종목"* ]]; then
            EMOJI="📊"
            CATEGORY="종목분석"
          elif [[ $normalized_file == *"1.Study"* ]]; then
            EMOJI="⚡"
            CATEGORY="산업분석"
          else
            EMOJI="📝"
            CATEGORY="기타"
          fi

          CONTENT_TITLE=$(head -20 "$normalized_file" | grep -E "^# " | head -1 | sed 's/^# //' | sed 's/📊 //g' | sed 's/🔍 //g' | sed 's/🏭 //g' || true)
          if [[ -z "$CONTENT_TITLE" ]]; then
            CONTENT_TITLE="$filename"
          fi

          CONTENT_SUMMARY=$(head -15 "$normalized_file" | grep -v "^#" | grep -v "^---" | grep -v "^$" | head -3 | tr '\n' ' ' | sed 's/\*\*//g' | sed 's/\*//g' | cut -c1-200 || true)

          MESSAGE="$MESSAGE$EMOJI <b>$CONTENT_TITLE</b>\n"
          MESSAGE="$MESSAGE📋 <i>$CATEGORY</i>\n"

          if [[ -n "$CONTENT_SUMMARY" ]]; then
            MESSAGE="$MESSAGE💭 $CONTENT_SUMMARY...\n"
          fi

          MESSAGE="$MESSAGE\n"
        done

        MESSAGE="$MESSAGE⏰ <i>업데이트: $(date '+%Y-%m-%d %H:%M:%S')</i>"

        # JSON 파일 생성 (줄바꿈 안전 처리)
        echo "{" > /tmp/message.json
        echo "  \"chat_id\": \"$TELEGRAM_CHAT_ID\"," >> /tmp/message.json
        echo "  \"parse_mode\": \"HTML\"," >> /tmp/message.json
        echo "  \"disable_web_page_preview\": false," >> /tmp/message.json
        echo -n "  \"text\": \"" >> /tmp/message.json
        echo -e "$MESSAGE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g' >> /tmp/message.json
        echo "\"" >> /tmp/message.json
        echo "}" >> /tmp/message.json

        # 텔레그램 전송
        response=$(curl -s -w "%{http_code}" -X POST \
          "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -H "Content-Type: application/json" \
          -d @/tmp/message.json)

        http_code="${response: -3}"

        if [[ "$http_code" == "200" ]]; then
          echo "✅ 텔레그램 전송 성공"
        else
          echo "❌ 텔레그램 전송 실패 (HTTP: $http_code)"
          echo "Response: ${response%???}"
        fi

        rm -f /tmp/message.json
